---
kind: Template
apiVersion: v1
metadata:
  annotations:
    iconClass: icon-eap
    tags: eap,javaee,java,jboss
    version: 5.0.3
    openshift.io/display-name: Entando in EAP 7.1 + PostgreSQL (Persistent with https)
    openshift.io/provider-display-name: Entando
    description: An example Entando application with a PostgreSQL database.
    template.openshift.io/long-description: This template defines resources needed
      to develop Entando applications based on EAP 7.1, including a build configuration,
      application deployment configuration, database deployment configuration for
      PostgreSQL using persistence and secure communication using https.
    template.openshift.io/documentation-url: https://central.entando.com/
    template.openshift.io/support-url: https://central.entando.com
  name: entando-eap71-postgresql95-persistent-s2i
labels:
  template: entando-eap71-postgresql95-persistent-s2i
message: 'A new Entando EAP 12 and PostgreSQL 9.5 persistent based application. SSL can support can be added
  by recreating the secure route with the necessary keys and certificats. The username/password for accessing
  the PostgreSQL databases "${ENTANDO_PORT_DATABASE}" and "${ENTANDO_SERV_DATABASE}" is specifed in the ${DB_SECRET} secret.
  Please be sure to create the "${JGROUPS_ENCRYPT_SECRET}"
  containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications.'
parameters:
- displayName: Application Name
  description: The name for the application.
  name: APPLICATION_NAME
  value: entando-sample
  required: false
- displayName: Entando Image Stream Tag
  description: The Image Stream Tag to use, which generally corresponds with the Entando version to be used
  name: ENTANDO_IMAGE_VERSION
  value: 5.2.0-SNAPSHOT
  required: false
- displayName: Custom http Route Hostname
  description: 'Custom hostname for http service route.  Leave blank for default hostname,
    e.g.: <application-name>-<project>.<default-domain-suffix>'
  name: ENTANDO_ENGINE_HOSTNAME
  value: ''
  required: false
- displayName: Custom https Route Hostname
  description: 'Custom hostname for https service route.  Leave blank for default
    hostname, e.g.: secure-<application-name>-<project>.<default-domain-suffix>'
  name: ENTANDO_ENGINE_SECURE_HOSTNAME
  value: ''
  required: false
- displayName: Context root of the Entando Runtime web app
  description: 'Context root of the Entando Runtime web app'
  name: ENTANDO_ENGINE_WEB_CONTEXT
  value: ''
  required: true
- displayName: The base url to be used to access the Entando rest services.
  description: NB!! This must reflect either ENTANDO_ENGINE_SECURE_HOSTNAME or ENTANDO_ENGINE_HOSTNAME, as well
    as any web context root that may be used
  name: ENTANDO_ENGINE_BASEURL
  value: ''
  required: false
- displayName: Custom HTTP Route Hostname for AppBuilder
  description: 'Custom HTTP Route Hostname for AppBuilder'
  name: ENTANDO_APP_BUILDER_HOSTNAME
  value: ''
  required: false
- displayName: Git Repository URL
  description: Git source URI for application
  name: SOURCE_REPOSITORY_URL
  value: https://github.com/entando/entando-sample-minimal.git
  required: true
- displayName: Git Reference
  description: Git branch/tag reference
  name: SOURCE_REPOSITORY_REF
  value: master
  required: false
- displayName: Source Secret
  description: Source Secret containing the Username and Password for the source repository
  name: SOURCE_SECRET
  value: entando-source-secret
  required: false
- displayName: Context Directory
  description: Path within Git project to build; empty for root project directory.
  name: CONTEXT_DIR
  value: ''
  required: false
- displayName: Entando Port Database Name
  description: Entando Port Database name
  name: ENTANDO_PORT_DATABASE
  value: entandoPort
  required: false
- displayName: Entando Port Database Name
  description: Entando Port Database name
  name: ENTANDO_SERV_DATABASE
  value: entandoServ
  required: false
- displayName: Database Secret
  description: The name of the secret containing the 'username' and 'password' of
    the user that will access the Postgresql databases.
  name: DB_SECRET
  value: entando-db-secret
  required: true
- displayName: Activate OIDC Connector
  description: true if the OIDC Connector should be activated.
  name: ENTANDO_OIDC_ACTIVE
  value: 'false'
  required: false
- displayName: OIDC Authorization Location
  description: The URL that OIDC can redirect to in order to authorize the user.
  name: ENTANDO_OIDC_AUTH_LOCATION
  value: ''
  required: false
- displayName: OIDC Token Location
  description: The URL from which Entando can retrieve the OIDC token after user authorization.
  name: ENTANDO_OIDC_TOKEN_LOCATION
  value: ''
  required: false
- displayName: OIDC Client ID
  description: The CLient ID uniquely identifying this Entando instance with the identity provider
  name: ENTANDO_OIDC_CLIENT_ID
  value: ''
  required: false
- displayName: OIDC Redirect Base URL
  description: The base url of all possible acceptable redirect URL's that could be sent to the identity
    provider. Optional - calculated from the received url.
  name: ENTANDO_OIDC_REDIRECT_BASE_URL
  value: ''
  required: false
- displayName: RedHat Process Automation Manager KIE Server Secret
  description: The secret containing the 'username', 'password', 'url' that would
    provide access to a RedHat Process Automation Manager instance
  name: KIE_SERVER_SECRET
  value: entando-pam-secret
  required: false
- displayName: Database Volume Capacity
  description: Size of persistent storage for database volume.
  name: VOLUME_CAPACITY
  value: 1Gi
  required: false
- displayName: Datasource Minimum Pool Size
  description: Sets xa-pool/min-pool-size for the configured datasource.
  name: DB_MIN_POOL_SIZE
  required: false
- displayName: Datasource Maximum Pool Size
  description: Sets xa-pool/max-pool-size for the configured datasource.
  name: DB_MAX_POOL_SIZE
  required: false
- displayName: Datasource Transaction Isolation
  description: Sets transaction-isolation for the configured datasource.
  name: DB_TX_ISOLATION
  required: false
- displayName: PostgreSQL Maximum number of connections
  description: The maximum number of client connections allowed. This also sets the
    maximum number of prepared transactions.
  name: POSTGRESQL_MAX_CONNECTIONS
  value: '100'
  required: false
- displayName: PostgreSQL Shared Buffers
  description: Configures how much memory is dedicated to PostgreSQL for caching data.
  name: POSTGRESQL_SHARED_BUFFERS
  value: 32MB
  required: false
- displayName: Github Webhook Secret
  description: GitHub trigger secret
  name: GITHUB_WEBHOOK_SECRET
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: true
- displayName: Generic Webhook Secret
  description: Generic build trigger secret
  name: GENERIC_WEBHOOK_SECRET
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: true
- displayName: ImageStream Namespace
  description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  name: IMAGE_STREAM_NAMESPACE
  value: openshift
  required: true
- displayName: JGroups Secret Name
  description: The name of the secret containing the keystore file
  name: JGROUPS_ENCRYPT_SECRET
  value: entando-app-secret
  required: false
- displayName: JGroups Keystore Filename
  description: The name of the keystore file within the secret
  name: JGROUPS_ENCRYPT_KEYSTORE
  value: jgroups.jceks
  required: false
- displayName: JGroups Certificate Name
  description: The name associated with the server certificate
  name: JGROUPS_ENCRYPT_NAME
  value: jgroups
  required: false
- displayName: JGroups Keystore Password
  description: The password for the keystore and certificate
  name: JGROUPS_ENCRYPT_PASSWORD
  value: mykeystorepassword
  required: false
- displayName: JGroups Cluster Password
  description: JGroups cluster password
  name: JGROUPS_CLUSTER_PASSWORD
  from: "[a-zA-Z0-9]{8}"
  generate: expression
  required: true
- displayName: Deploy Exploded Archives
  description: Controls whether exploded deployment content should be automatically
    deployed
  name: AUTO_DEPLOY_EXPLODED
  value: 'false'
  required: false
- displayName: Maven mirror URL
  description: Maven mirror to use for S2I builds
  name: MAVEN_MIRROR_URL
  value: ''
  required: false
- displayName: Maven Additional Arguments
  description: Maven additional arguments to use for S2I builds
  name: MAVEN_ARGS_APPEND
  value: ''
  required: false
- description: List of directories from which archives will be copied into the deployment
    folder. If unspecified, all archives in /target will be copied.
  name: ARTIFACT_DIR
  value: ''
  required: false
- description: Container memory limit
  name: MEMORY_LIMIT
  value: 1Gi
  required: false
objects:
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: "${APPLICATION_NAME}-engine"
  metadata:
    name: "${APPLICATION_NAME}-engine"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: The web server's http port.
      service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-portdb",
        "kind": "Service"}]'
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 5000
      targetPort: 5000
    selector:
      deploymentConfig: "${APPLICATION_NAME}-appbuilder"
  metadata:
    name: "${APPLICATION_NAME}-appbuilder"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: The static web server's http port.
      service.alpha.openshift.io/dependencies: '[{"name": "${APPLICATION_NAME}-engine", "kind":
        "Service"}]'
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentConfig: "${APPLICATION_NAME}-postgresql"
  metadata:
    name: "${APPLICATION_NAME}-portdb"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: The Port database server's port.
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentConfig: "${APPLICATION_NAME}-postgresql"
  metadata:
    name: "${APPLICATION_NAME}-servdb"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: The Serv database server's port.
- kind: Service
  apiVersion: v1
  spec:
    clusterIP: None
    ports:
    - name: ping
      port: 8888
    selector:
      deploymentConfig: "${APPLICATION_NAME}-engine"
  metadata:
    name: "${APPLICATION_NAME}-ping"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
      description: The JGroups ping port for clustering.
- kind: Route
  apiVersion: v1
  id: "${APPLICATION_NAME}-engine-http"
  metadata:
    name: "${APPLICATION_NAME}-engine-http"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: Route for application's http service.
  spec:
    host: "${ENTANDO_ENGINE_HOSTNAME}"
    path: "${ENTANDO_ENGINE_WEB_CONTEXT}"
    to:
      name: "${APPLICATION_NAME}-engine"
- kind: Route
  apiVersion: v1
  id: "${APPLICATION_NAME}-engine-https"
  metadata:
    name: ${APPLICATION_NAME}-engine-https
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: Route for application's https service.
  spec:
    host: "${ENTANDO_ENGINE_SECURE_HOSTNAME}"
    path: "${ENTANDO_ENGINE_WEB_CONTEXT}"
    to:
      name: ${APPLICATION_NAME}-engine
    tls:
      termination: edge
- kind: Route
  apiVersion: v1
  id: "${APPLICATION_NAME}-appbuilder"
  metadata:
    name: "${APPLICATION_NAME}-appbuilder"
    labels:
      application: "${APPLICATION_NAME}"
    annotations:
      description: Route for application's http service.
  spec:
    host: ${ENTANDO_APP_BUILDER_HOSTNAME}
    to:
      name: "${APPLICATION_NAME}-appbuilder"
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      application: "${APPLICATION_NAME}"
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-postgresql"
    labels:
      application: "${APPLICATION_NAME}"
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-s2i"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
        ref: "${SOURCE_REPOSITORY_REF}"
      contextDir: "${CONTEXT_DIR}"
      sourceSecret:
        name: "${SOURCE_SECRET}"
    strategy:
      type: Source
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: "${MAVEN_MIRROR_URL}"
        - name: MAVEN_ARGS_APPEND
          value: "${MAVEN_ARGS_APPEND}"
        - name: ARTIFACT_DIR
          value: "${ARTIFACT_DIR}"
        - name: PREPARE_DATA
          value: "true"
        forcePull: true
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_STREAM_NAMESPACE}"
          name: entando-eap71-clustered-openshift:${ENTANDO_IMAGE_VERSION}
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}:latest"
    triggers:
    - type: GitHub
      github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
    - type: Generic
      generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
    - type: ImageChange
      imageChange: {}
    - type: ConfigChange
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-postgresql-s2i"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    source:
      type: Git
      git:
        uri: "${SOURCE_REPOSITORY_URL}"
        ref: "${SOURCE_REPOSITORY_REF}"
      contextDir: "${CONTEXT_DIR}"
      sourceSecret:
        name: "${SOURCE_SECRET}"
    strategy:
      type: Source
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: "${MAVEN_MIRROR_URL}"
        - name: MAVEN_ARGS_APPEND
          value: "${MAVEN_ARGS_APPEND}"
        - name: PORTDB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "${DB_SECRET}"
        - name: PORTDB_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: "${DB_SECRET}"
        - name: SERVDB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: "${DB_SECRET}"
        - name: SERVDB_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: "${DB_SECRET}"
        - name: PORTDB_DATABASE
          value: "${ENTANDO_PORT_DATABASE}"
        - name: SERVDB_DATABASE
          value: "${ENTANDO_SERV_DATABASE}"
        - name: POSTGRESQL_MAX_CONNECTIONS
          value: "${POSTGRESQL_MAX_CONNECTIONS}"
        - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
          value: "${POSTGRESQL_MAX_CONNECTIONS}"
        - name: POSTGRESQL_SHARED_BUFFERS
          value: "${POSTGRESQL_SHARED_BUFFERS}"
        - name: POSTGRESQL_EFFECTIVE_CACHE_SIZE
          value: 128MB
        forcePull: true
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_STREAM_NAMESPACE}"
          name: entando-postgresql95-openshift:${ENTANDO_IMAGE_VERSION}
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}-postgresql:latest"
    triggers:
    - type: GitHub
      github:
        secret: "${GITHUB_WEBHOOK_SECRET}"
    - type: Generic
      generic:
        secret: "${GENERIC_WEBHOOK_SECRET}"
    - type: ImageChange
      imageChange: {}
    - type: ConfigChange
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-engine"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}-engine"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}-engine"
    template:
      metadata:
        name: "${APPLICATION_NAME}-engine"
        labels:
          deploymentConfig: "${APPLICATION_NAME}-engine"
          application: "${APPLICATION_NAME}"
      spec:
        terminationGracePeriodSeconds: 75
        containers:
        - name: "${APPLICATION_NAME}-engine"
          image: "${APPLICATION_NAME}"
          imagePullPolicy: Always
          resources:
            limits:
              memory: "${MEMORY_LIMIT}"
          volumeMounts:
          - name: eap-jgroups-keystore-volume
            mountPath: "/etc/jgroups-encrypt-secret-volume"
            readOnly: true
          - mountPath: "/entando-data"
            name: "${APPLICATION_NAME}-entando-pvol"
          livenessProbe:
            httpGet:
              path: ${ENTANDO_ENGINE_WEB_CONTEXT}
              port: 8080
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: ${ENTANDO_ENGINE_WEB_CONTEXT}
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          ports:
          - name: jolokia
            containerPort: 8778
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: https
            containerPort: 8443
            protocol: TCP
          - name: ping
            containerPort: 8888
            protocol: TCP
          env:
#          - name: DB_SERVICE_PREFIX_MAPPING
#            value: "${APPLICATION_NAME}-portdb=PORTDB,${APPLICATION_NAME}-servdb=SERVDB"
          - name: PORTDB_JNDI
            value: java:jboss/datasources/entandoPortDataSource
          - name: SERVDB_JNDI
            value: java:jboss/datasources/entandoServDataSource
          - name: PORTDB_DRIVER
            value: postgresql
          - name: SERVDB_DRIVER
            value: postgresql
          - name: PORTDB_URL
            value: jdbc:postgresql://${APPLICATION_NAME}-portdb:5432/${ENTANDO_PORT_DATABASE}
          - name: SERVDB_URL
            value: jdbc:postgresql://${APPLICATION_NAME}-servdb:5432/${ENTANDO_SERV_DATABASE}
          - name: PORTDB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "${DB_SECRET}"
          - name: PORTDB_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: "${DB_SECRET}"
          - name: SERVDB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "${DB_SECRET}"
          - name: SERVDB_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: "${DB_SECRET}"
          - name: PORTDB_DATABASE
            value: "${ENTANDO_PORT_DATABASE}"
          - name: SERVDB_DATABASE
            value: "${ENTANDO_SERV_DATABASE}"
          - name: SERVDB_MIN_POOL_SIZE
            value: "${DB_MIN_POOL_SIZE}"
          - name: PORTDB_MIN_POOL_SIZE
            value: "${DB_MIN_POOL_SIZE}"
          - name: SERVDB_MAX_POOL_SIZE
            value: "${DB_MAX_POOL_SIZE}"
          - name: PORTDB_MAX_POOL_SIZE
            value: "${DB_MAX_POOL_SIZE}"
          - name: PORTDB_TX_ISOLATION
            value: "${DB_TX_ISOLATION}"
          - name: SERVDB_TX_ISOLATION
            value: "${DB_TX_ISOLATION}"
          - name: JGROUPS_PING_PROTOCOL
            value: openshift.DNS_PING
          - name: OPENSHIFT_DNS_PING_SERVICE_NAME
            value: "${APPLICATION_NAME}-ping"
          - name: OPENSHIFT_DNS_PING_SERVICE_PORT
            value: '8888'
          - name: JGROUPS_ENCRYPT_SECRET
            value: "${JGROUPS_ENCRYPT_SECRET}"
          - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
            value: "/etc/jgroups-encrypt-secret-volume"
          - name: JGROUPS_ENCRYPT_KEYSTORE
            value: "${JGROUPS_ENCRYPT_KEYSTORE}"
          - name: JGROUPS_ENCRYPT_NAME
            value: "${JGROUPS_ENCRYPT_NAME}"
          - name: JGROUPS_ENCRYPT_PASSWORD
            value: "${JGROUPS_ENCRYPT_PASSWORD}"
          - name: JGROUPS_CLUSTER_PASSWORD
            value: "${JGROUPS_CLUSTER_PASSWORD}"
          - name: AUTO_DEPLOY_EXPLODED
            value: "${AUTO_DEPLOY_EXPLODED}"
          - name: DEFAULT_JOB_REPOSITORY
            value: "${APPLICATION_NAME}-postgresql"
          - name: TIMER_SERVICE_DATA_STORE
            value: "${APPLICATION_NAME}-postgresql"
          - name: ENTANDO_OIDC_ACTIVE
            value: "${ENTANDO_OIDC_ACTIVE}"
          - name: ENTANDO_OIDC_AUTH_LOCATION
            value: "${ENTANDO_OIDC_AUTH_LOCATION}"
          - name: ENTANDO_OIDC_TOKEN_LOCATION
            value: "${ENTANDO_OIDC_TOKEN_LOCATION}"
          - name: ENTANDO_OIDC_CLIENT_ID
            value: "${ENTANDO_OIDC_CLIENT_ID}"
          - name: ENTANDO_OIDC_REDIRECT_BASE_URL
            value: "${ENTANDO_OIDC_REDIRECT_BASE_URL}"
          - name: ENTANDO_OIDC_ACTIVE
            value: "${ENTANDO_OIDC_ACTIVE}"
          - name: ENTANDO_OIDC_AUTH_LOCATION
            value: "${ENTANDO_OIDC_AUTH_LOCATION}"
          - name: ENTANDO_OIDC_TOKEN_LOCATION
            value: "${ENTANDO_OIDC_TOKEN_LOCATION}"
          - name: ENTANDO_OIDC_CLIENT_ID
            value: "${ENTANDO_OIDC_CLIENT_ID}"
          - name: ENTANDO_OIDC_REDIRECT_BASE_URL
            value: "${ENTANDO_OIDC_REDIRECT_BASE_URL}"
          - name: KIE_SERVER_BASE_URL
            valueFrom:
              secretKeyRef:
                key: url
                name: "${KIE_SERVER_SECRET}"
          - name: KIE_SERVER_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: "${KIE_SERVER_SECRET}"
          - name: KIE_SERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "${KIE_SERVER_SECRET}"
        volumes:
        - name: eap-jgroups-keystore-volume
          secret:
            secretName: "${JGROUPS_ENCRYPT_SECRET}"
        - name: "${APPLICATION_NAME}-entando-pvol"
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}-entando-claim"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-postgresql"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}-postgresql"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}-postgresql:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}-postgresql"
    template:
      metadata:
        name: "${APPLICATION_NAME}-postgresql"
        labels:
          deploymentConfig: "${APPLICATION_NAME}-postgresql"
          application: "${APPLICATION_NAME}"
      spec:
        terminationGracePeriodSeconds: 60
        containers:
        - name: "${APPLICATION_NAME}-postgresql"
          image: "${APPLICATION_NAME}-postgresql"
          imagePullPolicy: Always
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - "/bin/sh"
              - "-i"
              - "-c"
              - "psql -h 127.0.0.1 -U postgres -q -d postgres -c '\\l'|grep '5 rows'"
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 180
            tcpSocket:
              port: 5432
          volumeMounts:
          - mountPath: "/var/lib/pgsql/data"
            name: "${APPLICATION_NAME}-postgresql-pvol"
          env:
          - name: PORTDB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "${DB_SECRET}"
          - name: PORTDB_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: "${DB_SECRET}"
          - name: SERVDB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: "${DB_SECRET}"
          - name: SERVDB_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: "${DB_SECRET}"
          - name: PORTDB_DATABASE
            value: "${ENTANDO_PORT_DATABASE}"
          - name: SERVDB_DATABASE
            value: "${ENTANDO_SERV_DATABASE}"
          - name: POSTGRESQL_MAX_CONNECTIONS
            value: "${POSTGRESQL_MAX_CONNECTIONS}"
          - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
            value: "${POSTGRESQL_MAX_CONNECTIONS}"
          - name: POSTGRESQL_SHARED_BUFFERS
            value: "${POSTGRESQL_SHARED_BUFFERS}"
        volumes:
        - name: "${APPLICATION_NAME}-postgresql-pvol"
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}-postgresql-claim"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-appbuilder"
    generation: 1
    creationTimestamp:
    labels:
      application: "${APPLICATION_NAME}"
    annotations: {}
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
      activeDeadlineSeconds: 21600
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}-appbuilder"
        from:
          kind: ImageStreamTag
          namespace: "${IMAGE_STREAM_NAMESPACE}"
          name: appbuilder:${ENTANDO_IMAGE_VERSION}
    replicas: 1
    selector:
      deploymentConfig: "${APPLICATION_NAME}-appbuilder"
    template:
      metadata:
        creationTimestamp:
        labels:
          deploymentConfig: "${APPLICATION_NAME}-appbuilder"
          application: "${APPLICATION_NAME}"
        annotations: {}
      spec:
        containers:
        - name: "${APPLICATION_NAME}-appbuilder"
          image: "${IMAGE_STREAM_NAMESPACE}/appbuilder:${ENTANDO_IMAGE_VERSION}"
          ports:
          - containerPort: 5000
            protocol: TCP
          env:
          - name: DOMAIN
            value: "${ENTANDO_ENGINE_BASEURL}"
          - name: CLIENT_SECRET
            value: appbuilder_secret
          resources: {}
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${APPLICATION_NAME}-postgresql-claim"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${APPLICATION_NAME}-entando-claim"
    labels:
      application: "${APPLICATION_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${VOLUME_CAPACITY}"
